type Card {
  advancementCost: Int
  agendaPoints: Int
  baseLink: Int
  cost: Int
  cycle: String
  deckLimit: Int
  faction: Faction
  factionCost: Int
  flavor: String
  id: String!
  illustrator: String
  influenceLimit: Int
  keywords: String
  memoryCost: Int
  minimumDeckSize: Int
  pack: String!
  position: Int
  quantity: Int
  side: Side!
  strength: Int
  text: String
  title: String!
  trashCost: Int
  type: Type!
  uniqueness: Boolean!
}

enum Faction {
  ADAM
  APEX
  ANARCH
  CRIMINAL
  HAASBIOROID
  JINTEKI
  NBN
  NEUTRALCORP
  NEUTRALRUNNER
  SHAPER
  SUNNYLEBEAU
  WEYLANDCONSORTIUM
}

enum Side {
  CORP
  RUNNER
}

enum Type {
  AGENDA
  ASSET
  EVENT
  HARDWARE
  ICE
  IDENTITY
  OPERATION
  PROGRAM
  RESOURCE
  UPGRADE
}

input Filter {
  advancementCost: Int
  agendaPoints: Int
  baseLink: Int
  cost: Int
  deckLimit: Int
  faction: Faction
  factionCost: Int
  flavor: String
  id: String
  illustrator: String
  influenceLimit: Int
  keywords: String
  memoryCost: Int
  minimumDeckSize: Int
  pack: String
  position: Int
  quantity: Int
  side: Side
  strength: Int
  text: String
  trashCost: Int
  type: Type
  uniqueness: Boolean
}

type Query {
  searchCards(
    filter: Filter,
    fuzzyString: String,
    reject: Filter
  ): [Card]
  getDistinct(field: String!): [Card]
}
