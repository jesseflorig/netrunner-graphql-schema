# TODO: Generate IDs pack-cardnumber
# TODO: Rename keywords to subtypes
# TODO: Rename factionCost to influenceCost
# TODO: Rename cost to playCost (Operations)
# TODO: Rename cost to rezCost (Assets/Ice)
# TODO: Rename position to cardNumber
"""A Netrunner card"""
interface Card {
  cycle: String
  faction: Faction!
  flavor: String
  id: String!
  illustrator: String!
  keywords: String!
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  text: String
  title: String!
  type: Type!
  uniqueness: Boolean!
}

type Agenda implements Card {
  advancementCost: Int!
  agendaPoints: Int!
  cost: Int!
  cycle: String!
  faction: Faction!
  factionCost: Int!
  flavor: String
  illustrator: String!
  id: String!
  keywords: String!
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  text: String
  title: String!
  type: Type!
  uniqueness: Boolean! 
}

type Asset implements Card {
  cost: Int!
  cycle: String!
  faction: Faction!
  factionCost: Int!
  flavor: String
  illustrator: String!
  id: String!
  keywords: String!
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  text: String!
  trashCost: Int!
  title: String!
  type: Type!
  uniqueness: Boolean! 
}

type Ice implements Card {
  cost: Int!
  cycle: String!
  faction: Faction!
  factionCost: Int!
  flavor: String
  illustrator: String!
  id: String!
  keywords: String!
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  strength: Int
  text: String!
  title: String!
  type: Type!
  uniqueness: Boolean! 
}

type Identity implements Card {
  cycle: String!
  faction: Faction!
  flavor: String
  illustrator: String!
  id: String!
  influenceLimit: Int
  keywords: String!
  minDeckSize: Int!
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  text: String!
  title: String!
  type: Type!
  uniqueness: Boolean!
}

type Operation implements Card {
  cost: Int!
  cycle: String!
  faction: Faction!
  factionCost: Int!
  flavor: String
  illustrator: String!
  id: String!
  keywords: String!
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  text: String!
  title: String!
  type: Type!
  uniqueness: Boolean! 
}

type Upgrade implements Card {
  cost: Int!
  cycle: String!
  faction: Faction!
  factionCost: Int!
  flavor: String
  illustrator: String!
  id: String!
  keywords: String!
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  text: String!
  title: String!
  type: Type!
  uniqueness: Boolean! 
}

"""The faction a card belongs to"""
enum Faction {
  ADAM
  APEX
  ANARCH
  CRIMINAL
  HAASBIOROID
  JINTEKI
  NBN
  NEUTRALCORP
  NEUTRALRUNNER
  SHAPER
  SUNNYLEBEAU
  WEYLANDCONSORTIUM
}

"""The player side a card belongs to"""
enum Side {
  CORP
  RUNNER
}

"""The main card type"""
enum Type {
  AGENDA
  ASSET
  EVENT
  HARDWARE
  ICE
  IDENTITY
  OPERATION
  PROGRAM
  RESOURCE
  UPGRADE
}

"""The card properties available to advanced search"""
input Filter {
  advancementCost: Int
  agendaPoints: Int
  baseLink: Int
  cost: Int
  deckLimit: Int
  faction: Faction
  factionCost: Int
  flavor: String
  id: String
  illustrator: String
  influenceLimit: Int
  keywords: String
  memoryCost: Int
  minimumDeckSize: Int
  pack: String
  position: Int
  quantity: Int
  side: Side
  strength: Int
  text: String
  trashCost: Int
  type: Type
  uniqueness: Boolean
}

type Query {
  """Search for cards"""
  searchCards(
    """Includes only cards that match all fields specified"""
    filter: Filter,
    """Fields to use in fuzzy search (default: title)"""
    fuzzyFields: [String],
    """Returns cards that fuzzy match on fuzzyFields"""
    fuzzySearch: String,
    """Determines sort fields on matched Cards (default: title)"""
    orderBy: [String],
    """Excludes cards that match all fields specified"""
    reject: Filter
  ): [Card]
  """Return a list of unique values for a field"""
  getDistinct(field: String!): [Card]
}
