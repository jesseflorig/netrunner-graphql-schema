# TODO: Generate IDs pack-cardnumber
# TODO: Rename keywords to subtypes
# TODO: Rename factionCost to influenceCost
# TODO: Rename cost to playCost (Operation/Event)
# TODO: Rename cost to rezCost (Asset/Ice)
# TODO: Rename cost to installCost (Program/Hardware)
# TODO: Rename position to cardNumber
# TODO: Rename quantity to packQty
# TODO: Resolve pack to Pack
# TODO: Resolve cycle to Cycle
# TODO: Add Formats

"""A Netrunner card"""
interface Card {
  cycle: String
  faction: Faction!
  flavor: String
  id: String!
  illustrator: String!
  keywords: String
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  text: String
  title: String!
  type: Type!
  uniqueness: Boolean!
}

"""A Corporation Agenda card"""
type Agenda implements Card {
  advancementCost: Int!
  agendaPoints: Int!
  cost: Int
  cycle: String!
  faction: Faction!
  factionCost: Int
  flavor: String
  illustrator: String!
  id: String!
  keywords: String
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  text: String
  title: String!
  type: Type!
  uniqueness: Boolean! 
}

"""A Corporation Asset card"""
type Asset implements Card {
  cost: Int
  cycle: String!
  faction: Faction!
  factionCost: Int
  flavor: String
  illustrator: String!
  id: String!
  keywords: String
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  text: String!
  trashCost: Int!
  title: String!
  type: Type!
  uniqueness: Boolean! 
}

"""A Corporation Identity card"""
type CorpIdentity implements Card {
  cycle: String!
  faction: Faction!
  flavor: String
  illustrator: String!
  id: String!
  influenceLimit: Int
  keywords: String
  minDeckSize: Int!
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  text: String!
  title: String!
  type: Type!
  uniqueness: Boolean!
}

"""A Corporation Ice card"""
type Ice implements Card {
  cost: Int
  cycle: String!
  faction: Faction!
  factionCost: Int
  flavor: String
  illustrator: String!
  id: String!
  keywords: String
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  strength: Int
  text: String!
  title: String!
  type: Type!
  uniqueness: Boolean! 
}

"""A Corporation Operation card"""
type Operation implements Card {
  cost: Int
  cycle: String!
  faction: Faction!
  factionCost: Int
  flavor: String
  illustrator: String!
  id: String!
  keywords: String
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  text: String!
  title: String!
  type: Type!
  uniqueness: Boolean! 
}

"""A Corporation Upgrade card"""
type Upgrade implements Card {
  cost: Int
  cycle: String!
  faction: Faction!
  factionCost: Int
  flavor: String
  illustrator: String!
  id: String!
  keywords: String
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  text: String!
  title: String!
  type: Type!
  uniqueness: Boolean! 
}

"""A Runner Event card"""
type Event implements Card {
  cost: Int
  cycle: String
  faction: Faction!
  factionCost: Int
  flavor: String
  id: String!
  illustrator: String!
  keywords: String
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  text: String
  title: String!
  type: Type!
  uniqueness: Boolean!
}

"""A Runner Hardware card"""
type Hardware implements Card {
  cost: Int
  cycle: String
  faction: Faction!
  factionCost: Int
  flavor: String
  id: String!
  illustrator: String!
  keywords: String
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  text: String
  title: String!
  type: Type!
  uniqueness: Boolean!
}

"""A Runner Program card"""
type Program implements Card {
  cost: Int
  cycle: String
  faction: Faction!
  factionCost: Int
  flavor: String
  id: String!
  illustrator: String!
  keywords: String
  memoryCost: Int!
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  strength: Int
  text: String
  title: String!
  type: Type!
  uniqueness: Boolean!
}

"""A Runner Resource card"""
type Resource implements Card {
  cost: Int
  cycle: String
  faction: Faction!
  factionCost: Int
  flavor: String
  id: String!
  illustrator: String!
  keywords: String
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  text: String
  title: String!
  type: Type!
  uniqueness: Boolean!
}

"""A Runner Identity card"""
type RunnerIdentity implements Card {
  baseLink: Int!
  cycle: String
  faction: Faction!
  flavor: String
  id: String!
  illustrator: String!
  keywords: String
  minDeckSize: Int!
  influenceLimit: Int
  pack: String!
  position: Int!
  quantity: Int!
  side: Side!
  text: String
  title: String!
  type: Type!
  uniqueness: Boolean!
}

"""The faction a card belongs to"""
enum Faction {
  ADAM
  APEX
  ANARCH
  CRIMINAL
  HAASBIOROID
  JINTEKI
  NBN
  NEUTRALCORP
  NEUTRALRUNNER
  SHAPER
  SUNNYLEBEAU
  WEYLANDCONSORTIUM
}

"""The player side a card belongs to"""
enum Side {
  CORP
  RUNNER
}

"""The main card type"""
enum Type {
  AGENDA
  ASSET
  EVENT
  HARDWARE
  ICE
  IDENTITY
  OPERATION
  PROGRAM
  RESOURCE
  UPGRADE
}

enum ExpansionType {
  CORE
  CYCLE
  DELUXE
  SPECIAL
}

interface Expansion {
  id: String!
  name: String!
  type: ExpansionType!
}

type Cycle implements Expansion {
  id: String!
  name: String!
  type: ExpansionType!
  packs: [Pack]!
}

type NonCycle implements Expansion {
  id: String!
  name: String!
  releaseDate: String!
  type: ExpansionType!
}

type Pack {
  id: String!
  name: String!
  releaseDate: String!
}

type Deck {
  cards: [Card]
  id: String!
  name: String!
}

"""The card properties available to advanced search"""
input Filter {
  field: String!
  comparator: String!
  value: String!
}

type Query {
  """Get a card based on card id"""
  getCardById(id: String!): Card
  """Return a list of unique values for a field"""
  getDistinctByField(field: String!): [Card]
  """Search for cards"""
  searchCards(
    """Includes only cards that match all fields specified"""
    filters: [Filter],
    """Fields to use in fuzzy search (default: title)"""
    fuzzyFields: [String],
    """Returns cards that fuzzy match on fuzzyFields"""
    fuzzySearch: String,
    """Excludes cards that match all fields specified"""
    sortFields: [String],
  ): [Card]
}
